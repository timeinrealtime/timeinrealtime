/******************************************************************************************************************************
 * Name: Kevin Donlon
 * Presentation Date: 03/16/2021 - 03/20/2021
 * Course: EET241 Microcontroller II
 * Assignment: Final Capstone Project
 * 
 * Program Abstract:
 * This code will operate a somewhat complex system of sensors, input devices, and output devices. The main focus of the system
 * is to create a password protected dairy barn milking system that has an automatic gate opening system that is based off of
 * RFID tags on the cows. Once the password is entered, the system begins. The gate opens and the system waits for cows. Once 
 * a cow is scanned, the program increments a counter that tracks the number of cows entering or leaving the barn. There is 
 * also a counter that tracks the state of the gate, being open or closed. Based on when the gate is open and closed, and the 
 * count of the cows, the gate will open and close accordingly. The system will operate forever until the user hits the reset
 * button and the system restarts and awaits a new password.
 * 
 * This code leaves open room to implement an RFID based cow tracking and management system. In the future, a logging system
 * will be added to track which cows were scanned at certain times, and display information about the cow scanned.
 */



//*************************************************Library Section*************************************************************

#include <Wire.h>                       //Wire library for communication between I2C devices, in this case, the LCD screen
#include <LiquidCrystal_I2C.h>          //LCD I2C library for communication with screen
#include <Keypad.h>                     //Keypad library for use with 4x4 matrix keypad
#include <MFRC522.h>                    //RFID library for use with MFRC
#include <Stepper.h>                    //Stepper library for use with bipolar stepper motor

//*****************************************************************************************************************************

//*************************************************Predefined Constants********************************************************

#define Password_Length 9               //set Password_Length as a constant, this allows the password to be 8 keys, (9 - 1)
#define SS_PIN 9                        //set SS_PIN as a constant, designating pin 9 for use with SDA pin on RFID reader
#define RST_PIN 8                       //set RST_PIN as a constant, designating pin 8 for use with RST pin on RFID reader

//*****************************************************************************************************************************

//*************************************************Variables and Constants*****************************************************

int signalPin = 12;                     //set signalPin equal to 12 for use programming LCD
int cowCount = 0;                       //set cowCount = to 0, intial setting for start of cow counting sequence
int gateState = 0;                      //set gateState equal to 0, this variable will keep track if the gate is open or close

char Data[Password_Length];                   //establish password length, in this case it is 8, 9 - 1
char Master[Password_Length] = "134679*#";    //set password as "134679*#"
byte data_count = 0, master_count = 0;        //data_count and master_count will be used for password entry system                     
char customKey;

const int opengate = 200;  //change this to fit the number of steps per revolution of stepper motor
const byte ROWS = 4;       //establish ROWS as a constant of 4 for number of rows on keypad
const byte COLS = 4;       //establish COLS as a constant of 4 for number of columns on keypad

//*****************************************************************************************************************************

//*************************************************Setup***********************************************************************

//establish a matrix of characters for each designated position on the keypad, the matrix is a character variable
char hexaKeys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

byte rowPins[ROWS] = {35, 37, 39, 41};          //pin 35, 37, 39, and 41 will be used for the rows of the 4x4 keypad
byte colPins[COLS] = {43, 45, 47, 49};          //pin 43, 45, 47, and 49 will be used for the columns of the 4x4 keypad

Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS); //setup keypad with variables designated above

LiquidCrystal_I2C lcd(0x27, 16, 2);             //set the LCD address to 0x27 for a 16 chars and 2 line display

MFRC522 mfrc522(SS_PIN, RST_PIN);               //create MFRC522 instance
Stepper myStepper(opengate, 29, 27, 25, 23);    //setup 4 pin bipolar stepper motor for use with pins 29, 27, 25, and 23
                                                //steps per revolution is set with 'opengate' variable

void setup(){                                   //arduino setup sequence
  pinMode(A6, INPUT);                           //set pin A6 as an input for use with gate open button
  digitalWrite(A6, HIGH);                       //set pin A6 HIGH
  pinMode(A7, INPUT);                           //set pin A7 as an input for use with gate close button
  digitalWrite(A7, HIGH);                       //set pin A7 HIGH
  
  lcd.init();                                   //initialize I2C LCD display 
  lcd.backlight();                              //initialize I2C display backlight
  pinMode(signalPin, OUTPUT);                   //set signalPin (pin 12) as an output
  
  //rfid setup
  Serial.begin(9600);                           //initiate a serial communication 
  SPI.begin();                                  //initiate  SPI bus
  mfrc522.PCD_Init();                           //initiate MFRC522 (RFID reader)

  //set stepper motor speed in rotations per minute
  myStepper.setSpeed(60);
  
  Serial.println();                             //empty space on Serial Monitor

  lcd.setCursor(0,0);                           //cursor position on LCD to the top row, left most position
  lcd.print("Enter Password:");                 //display "Enter Password" on LCD
}

//*****************************************************************************************************************************

//*****************************************************Main Loop***************************************************************
void loop(){
  
  customKey = customKeypad.getKey();          //accept user input on 4x4 keypad for password
  if (customKey){                             //compare entered password (customKey)
    Data[data_count] = customKey;             //counts the place in the password that was entered
    lcd.setCursor(data_count,1);              //set cursor on lcd to position 1
    lcd.print(Data[data_count]);              //print the key character selected by user
    data_count++;                             //increment data_count
    }

  if(data_count == Password_Length-1){        //when the number of digits in Password_Length matches data_count, continue
    lcd.clear();                              //clear LCD after password entry

    if(!strcmp(Data, Master)){                //compare password entered to the master password, if the same, continue
                                              //only after the password is entered will the system function, otherwise, nothing works
      lcd.print("Waiting for Cows");          //print "Waiting for Cows" to the LCD

      if (digitalRead(A6) == LOW){            //if at any time the button to open the gate is pressed, the gate opens
        myStepper.step(-60);                  //no matter where in the code the program is at, this always works
      }
      if (digitalRead(A7) == LOW){            //if at any time the button to close the gate is pressed, the gate closes
        myStepper.step(60);                   //no matter where in the code the program is at, this always works
      }
      
      //look for new cards with RFID reader
      if ( ! mfrc522.PICC_IsNewCardPresent()) 
      {
        return;
      }
      //select one of the scanned cards
      if ( ! mfrc522.PICC_ReadCardSerial()) 
      {
        return;
      }
  
      //the next 10 lines are the sequence required to display the scanned UID tag on the serial monitor
      //this can later be used to increment a tracking system where every cow is logged.
      Serial.print("UID tag :");              //display "UID tag :" obtained from rfid tag on the serial monitor
      String content= "";
      byte letter;

      //for loop to display every value of UID tag
      for (byte i = 0; i < mfrc522.uid.size; i++) 
      {
        Serial.print(mfrc522.uid.uidByte[i] < 0x2 ? " 0" : " ");
        Serial.print(mfrc522.uid.uidByte[i], HEX);
        content.concat(String(mfrc522.uid.uidByte[i] < 0x2 ? " 0" : " "));
        content.concat(String(mfrc522.uid.uidByte[i], HEX));
      }
      Serial.println();          //print empty space on serial monitor
      content.toUpperCase();     //change everything to uppercase

      //if the value on the UID tag is not "00 00 00 00", so any tag scanned, the loop begins
      //since no tracking is being done, any value that is not "00 00 00 00"" is valid
      if (content.substring(1) != "00 00 00 00" /*|| "7 96 BB 60") */) //change here the UID of the card/cards that you want to give access
      { 
        ++cowCount;                               //increment cowCount 
        Serial.println("Cow Scanned\n");          //display "Cow Scanned" on serial monitor
        lcd.clear();                              //clear LCD screen
        lcd.print("Cow #");                       //display "Cow #" on LCD so user knows what number cow is in barn
        lcd.print(cowCount);                      //display cowCount on LCD
        delay(500);                               //delay half a second

        //display UID tag under the cowCount variable on LCD screen, helpful for cow identification
        lcd.setCursor(0,1);                       //set cursor to bottom row of LCD screen
        String content= "";           
        byte letter;
        
        //loop to display every character of UID tag
        for (byte i = 0; i < mfrc522.uid.size; i++) 
        {
          lcd.print(mfrc522.uid.uidByte[i] < 0x2 ? " 0" : " ");
          lcd.print(mfrc522.uid.uidByte[i], HEX);
          content.concat(String(mfrc522.uid.uidByte[i] < 0x2 ? " 0" : " "));
          content.concat(String(mfrc522.uid.uidByte[i], HEX));
        }
        Serial.println();         //print empty space on serial monitor
        content.toUpperCase();    //change everything to uppercase

        
        delay(1500);              //delay 1.5 seconds

        Serial.println("Number of Cows Scanned: ");         //print "Number of Cows Scanned: " on serial monitor
        
        Serial.println(cowCount);                           //display cowCount on serial monitor
        Serial.println();
        Serial.println("*******************************");
    
        if (cowCount == 12)                   //if cowCount equals 12, continue
        {
          ++gateState;                        //pre-increment gateState
          Serial.println("\ngateState: ");    //display "gateState: " on serial monitor
          Serial.println(gateState);          //display gateState value on serial monitor
        }
    
        delay(500);                           //delay half a second
        Serial.println();                     //print empty space on serial monitor
     
      }

      if (cowCount == 12 && gateState == 1)   //if cowCount equals 12 and gateState equals 1, continue
      {
        delay(10000);                       //delay 10 second for gate to clear    
                                            //ideally this will be a relativeley long period of time to make sure there is no gate obstructions
                                            //the push buttons are used if there is an obstruction and the gate does not close correctly
                                            //the gate opening can be cleared and manually closed
                                          
        Serial.println("Gate Closing!");    //display "Gate Closing!" on serial monitor
        lcd.clear();                        //clear lcd screen
        lcd.print("Gate Closing!");         //display "Gate Closing!" on LCD screen
        
        myStepper.step(-60);                //move stepper motor -60 steps to close gate
        
        delay(2000);                        //delay 2 seconds
        
        Serial.println("Begin Milking!");   //diaplay "Begin Milking!" on serial monitor
        Serial.println();                   //display empty space on serial monitor
        Serial.println("*******************************");
        
        cowCount = 0;                       //set cowCount back to 0 for next round of cows, DO NOT FORGET
      }

      else if (cowCount == 12 && gateState == 2)
      {
        delay(10000);                       //delay 10 second for gate to clear    
                                            //ideally this will be a relativeley long period of time to make sure there is no gate obstructions
                                            //the push buttons are used if there is an obstruction and the gate does not close correctly
                                            //the gate opening can be cleared and manually closed
                                            
        Serial.println("Gate Opening!");    //display "Gate Opening!" on serial monitor
        lcd.clear();                        //clear lcd screen
        lcd.print("Gate Opening!");         //display "Gate Opening!" on LCD screen
        
        myStepper.step(60);                 //move stepper motor -60 steps to close gate
        
        delay(2000);                        //delay 2 seconds
        
        cowCount = 0;                       //set cowCount back to 0 for next round of cows, DO NOT FORGET
        gateState = 0;                      //set gateState back to 0, this is only done after the gate is opened again 
                                            //both if statements used cowCount equal 12 so the gateState is used to determine which way the 
                                            //gate operates in relation to if the cows just left or entered

        //display "Waiting for Cows!" on Serial monitor
        Serial.println("Waiting for Cows!");
        Serial.println();
        Serial.println("*******************************");
        
      }}

      //final else statement for incorrect password entry, if password entered is incorrect, continue
      else{
      lcd.print("Incorrect");               //print "Incorrect" to the LCD
      delay(1000);                          //delay 1 second
      lcd.clear();                          //clear LCD
      clearData();                          //call clearData function
      lcd.setCursor(0,0);                   //set cursor position to 1st row, 1st position
      lcd.print("Enter Password:");         //display "Enter Password" on LCD
      }
  }
}

//function to clear the dataCount so a new password can be attempted
void clearData(){
  while(data_count !=0){
    Data[data_count--] = 0; 
  }
  return;
}
